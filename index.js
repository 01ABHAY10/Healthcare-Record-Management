const express=require("express"),nodemailer=require("nodemailer"),{Web3Storage:e}=require("web3.storage"),{File:t}=require("web3.storage"),https=require("https"),{spawn:n}=require("child_process"),mongoose=require("mongoose"),bodyParser=require("body-parser"),CryptoJS=require("crypto-js"),cron=require("node-cron"),{KEY:a}=require("./config.js"),{MONGO_URL:o}=require("./config.js"),{ID:i}=require("./config.js"),{AdminKey:s}=require("./config.js"),{User:r}=require("./config.js"),{MAIL_KEY:c}=require("./config.js"),bcrypt=require("bcrypt"),{sendDataToPy:l}=require("./gendata.js"),salt=bcrypt.genSaltSync(10),app=express(),client=new e({token:a}),transporter=nodemailer.createTransport({service:"Gmail",auth:{user:"healthcare.record.management@gmail.com",pass:c}});async function ConnectDB(){try{await mongoose.connect(o),console.log("Database in connected...")}catch(e){console.log("Error while connecting database...")}}async function getFilename(){try{let e=await i.findOne().sort({id:-1}).exec(),t=e.id+1;return t}catch(n){return -1}}async function upload(e,n){let a=Buffer.from(JSON.stringify(e)),o=[new t([a],n)],i=await client.put(o);return console.log("Data stored with CID : "+i),i}async function retrieve(e){try{let t=await i.findOne({id:e}),n=t.cid,a="https://ipfs.io/ipfs/"+n+"/"+e+".json",o=await new Promise(function(e,t){https.get(a,function(t){t.on("data",function(t){let n=JSON.parse(t);e(n)})})});return o}catch(s){return console.log("Invalid id"),-1}}app.use(express.static("public")),app.use(bodyParser.json()),app.use(bodyParser.urlencoded({extended:!0})),app.listen(8e3,function(){console.log("Server listening on port 8000...")}),ConnectDB(),app.get("/",function(e,t){t.sendFile(__dirname+"/signup.html")});let Doc_ID_No;app.post("/patient-data",async function(e,t){let{name:n,age:a,gender:o,blood_group:s,height:r,weight:c,smoke:l,drink:d,tobacco:p,date:g,email:u,covid:y,disease1:m,disease2:h,disease3:f,disease4:b,disease5:D,disease6:w,other:k}=e.body,I=await getFilename();try{let T=await upload({Doc_ID:I,Data_Uploading_Date:g,Email:u,Name:n,Age:a,Gender:o,Blood_Group:s,Height:r,Weight:c,Smoking:l?"Yes":"No",Drinking:d?"Yes":"No",Tobacco:p?"Yes":"No",Disease_1:m||"-",Disease_2:h||"-",Disease_3:f||"-",Disease_4:b||"-",Disease_5:D||"-",Disease_6:w||"-",Covid_Vaccination_Status:y,Other_problems_or_symptoms:k},I+".json");await i.create({id:I,cid:T,email:u}),Doc_ID_No={ID:I}}catch(_){console.log("Error on storing data..."),Doc_ID_No={ID:!1}}});let present;app.post("/upload",async function(e,t){let n=e.body.key;console.log(n);try{present=await s.findOne({key:n}),null!=present?t.sendFile(__dirname+"/upload.html"):present={key:0}}catch(a){present={key:-1},console.log("Error in key verification")}}),app.get("/verify-key",function(e,t){t.header("Content-Type","application/json"),t.send(present)}),app.get("/update",function(e,t){t.header("Content-Type","application/json"),t.send(Doc_ID_No)});let patient_data,TOKEN;app.post("/view-data",async function(e,t){let n=e.body.id,a=e.body.token;try{searchMail=await i.findOne({id:n}),sendMail(searchMail.email,TOKEN)}catch(o){console.log(o)}a==TOKEN?-1==(patient_data=await retrieve(n))?patient_data={Doc_ID:-1}:t.sendFile(__dirname+"/view.html"):patient_data={Doc_ID:0}}),app.get("/data",function(e,t){t.header("Content-Type","application/json"),t.send(patient_data)});let loggedIn=!1,Username;app.post("/homepage",async function(e,t){let n=e.body.email1,a=e.body.password1;try{let o=await r.findOne({email:n}),i=bcrypt.compareSync(a,o.password);i?(t.sendFile(__dirname+"/index.html"),loggedIn=!0,Username={name:n}):t.send("Incorrect login Credentials...failed to login..")}catch(s){console.log(s)}}),app.get("/homepage",async function(e,t){loggedIn?t.sendFile(__dirname+"/index.html"):t.status(403).send("Unauthorized access...")});let VeriftToken;function generateToken(){var e=CryptoJS.lib.WordArray.random(4).toString(CryptoJS.enc.Hex);return console.log(e),e}function sendMail(e,t){let n={from:"Healthcare Record",to:e,subject:"Account Verification",html:`
    <!DOCTYPE html>
    <html>
    <head>
      <style>
      .center{
        text-align: center;
        align-items: center;
        align-self: center;
        align-content: center;
      }
      </style>
    </head>
    <body>
        <h1 class="center">Token Verification - Action Required</h1>
        <p>
        Please note that the <b>Token</b> is valid for a limited time and should be used immediately to ensure successful verification. 
        In case you do not complete the verification within the specified time, you may need to request a new <b>Token</b>.
        </p>
        <h2 class="center">${t}</h2>
        <p>
        If you have any questions or encounter any difficulties during the process, please do
         not hesitate to reach out to our customer support team at healthcare.record.management@gmail.com.
          We are available 24x7 and will be glad to assist you.
        </p>
        <h3 style="color: blue;">- Team @healthcare_record<h3>
    </body>
    </html>
    
    `};transporter.sendMail(n,(e,t)=>{e?console.log("Error:",e):console.log("Email sent:",t.response)})}app.post("/new-user",async function(e,t){let n=e.body.email,a=e.body.pass,o=await r.findOne({email:n});if(o){let i=bcrypt.compareSync(a,o.password);i?(loggedIn=!0,Username={name:n},t.send(!0)):t.send(!1)}else sendMail(n,VeriftToken=generateToken())}),app.post("/new-account",async function(e,t){let n=e.body.value;if(n==VeriftToken){let a=e.body.email,o=e.body.pass,i=bcrypt.hashSync(o,salt);try{await r.create({email:a,password:i}),loggedIn=!0,Username={name:a},t.send(!0)}catch(s){console.log(s)}}else t.send(!1)}),app.get("/analytics",function(e,t){loggedIn?t.sendFile(__dirname+"/analytics.html"):t.status(403).send("Login to see analytics...")}),app.get("/username",function(e,t){t.header("Content-Type","application/json"),t.send(Username)}),app.get("/logout",function(e,t){loggedIn=!1,Username=null,t.send(!0)}),app.post("/get-token",async function(e,t){let n=e.body.value,a=await i.findOne({id:n});a?TOKEN=generateToken():patient_data={Doc_ID:-1}}),cron.schedule("57 13 * * *",()=>{require("./analytics.js")},{scheduled:!0,timezone:"Asia/Kolkata"}),cron.schedule("56 13 * * *",()=>{require("./gendata.js"),l()},{scheduled:!0,timezone:"Asia/Kolkata"});